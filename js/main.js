/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("//import './frontEndSparkling.less';\r\n//import './frontEndIndustrial.less';\r\n//import './frontEndAzure.less';\r\n\r\n(function(){\r\n\r\n    const { registerBlockType } = wp.blocks;\r\n    const { PanelColorSettings, InnerBlocks } = wp.blockEditor;\r\n    const { select } = wp.data;\r\n    const { __ } = wp.i18n;\r\n\r\n    var textDomain = 'quotation-manager', \r\n        category = 'quotation-manager',\r\n        el = wp.element.createElement,\r\n        DateTimePicker = wp.components.DateTimePicker,\r\n        Fragment = wp.element.Fragment,\r\n        RichText = wp.blockEditor.RichText,\r\n        Text = wp.components.Text,\r\n        PanelBody = wp.components.PanelBody,\r\n        PanelRow = wp.components.PanelRow,\r\n        InspectorControls = wp.blockEditor.InspectorControls,\r\n        RangeControl = wp.components.RangeControl,\r\n        RadioControl = wp.components.RadioControl,\r\n        NumberControl = wp.components.NumberControl,\r\n        CheckboxControl = wp.components.CheckboxControl,\r\n        SelectControl = wp.components.SelectControl,\r\n        TextControl = wp.components.TextControl,\r\n        TextareaControl = wp.components.TextareaControl;\r\n\r\n    // Blocks allowed in quotation form\r\n    var allowed_blocks = [\r\n            'core/columns',\r\n            'core/paragraph',\r\n            'core/image',\r\n            category + '/row',\r\n            category + '/textarea',\r\n            category + '/radiobutton',\r\n            category + '/telephonenumber',\r\n            category + '/emailinput',\r\n            category + '/numberinput',\r\n            category + '/textinput',\r\n            category + '/checkbox',\r\n            category + '/select',\r\n            category + '/dateinput',\r\n            category + '/fileinput',\r\n            category + '/range'\r\n        ],\r\n        allowed_blocks_row = [\r\n            category + '/telephonenumber',\r\n            category + '/emailinput',\r\n            category + '/numberinput',\r\n            category + '/textinput',\r\n            category + '/checkbox',\r\n            category + '/select',\r\n            category + '/dateinput',\r\n            category + '/fileinput',\r\n            category + '/range'\r\n        ]\r\n\r\n    // To decide if a block is on a form or on a row because all row elements \r\n    // should be grouped in some way and names of fields should be unique for\r\n    // a row element and can be the same among different parents e.g. _rowA_amount_input \r\n    // and _amount_input\r\n    var rowClientIds = [],\r\n        rowChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\r\n\r\n    var svgVisual1 = \"M 5.8082389,1.6174452 A 4.9382555,4.4412773 0 0 1 0.86998346,6.0587226 V 14.941277 A 4.9382555,4.4412773 0 0 1 5.8082389,19.382555 H 94.696837 a 4.9382555,4.4412773 0 0 1 4.938254,-4.441278 V 6.0587226 A 4.9382555,4.4412773 0 0 1 94.696837,1.6174452 Z\"\r\n    \r\n    var svgPath3 = \"M 14.625 28.53125 A 11.237947 11.237947 0 0 1 14.646484 29.162109 A 11.237947 11.237947 0 0 1 3.5351562 40.396484 L 3.5351562 59.931641 A 11.237947 11.237947 0 0 1 14.638672 70.958984 L 84.375 70.958984 A 11.237947 11.237947 0 0 1 95.603516 59.925781 A 11.237947 11.237947 0 0 1 96.722656 59.980469 L 96.722656 40.333984 A 11.237947 11.237947 0 0 1 95.603516 40.400391 A 11.237947 11.237947 0 0 1 84.365234 29.162109 A 11.237947 11.237947 0 0 1 84.396484 28.53125 L 14.625 28.53125 z \",\r\n        svgPath5 = \"m 4.6789843,294.47185 q 0,0.30492 -0.1114126,0.58345 -0.1114127,0.27853 -0.3049188,0.4691 -0.2110976,0.20524 -0.5042888,0.31665 -0.2902592,0.10848 -0.6743396,0.10848 -0.3576932,0 -0.6889992,-0.0762 -0.331306,-0.0733 -0.5599951,-0.17884 v -0.61864 h 0.041047 q 0.2404168,0.15246 0.562927,0.26094 0.3225103,0.10555 0.6332929,0.10555 0.2081657,0 0.4016719,-0.0586 0.1964381,-0.0586 0.3488975,-0.20523 0.1290041,-0.12607 0.1935061,-0.30199 0.067434,-0.17591 0.067434,-0.40753 0,-0.22576 -0.079162,-0.38115 -0.07623,-0.15539 -0.2140296,-0.24921 -0.1524594,-0.11142 -0.3723527,-0.1554 -0.2169615,-0.0469 -0.4866973,-0.0469 -0.2580082,0 -0.498425,0.0352 -0.2374848,0.0352 -0.4104676,0.0704 v -2.24877 h 2.6269927 v 0.51308 H 2.5885314 v 1.16104 q 0.1260722,-0.0117 0.2580082,-0.0176 0.131936,-0.006 0.2286891,-0.006 0.3547613,0 0.6215653,0.0616 0.2668039,0.0586 0.4896292,0.2111 0.2345529,0.16126 0.363557,0.41633 0.1290041,0.25508 0.1290041,0.63916 z\",\r\n        svgPath1 = \"M 10.755953,310.18573 H 2.3601193 V 308.6024 H 5.589286 V 298.20656 H 2.3601193 v -1.41666 q 0.65625,0 1.40625,-0.10417 0.75,-0.11458 1.1354167,-0.32292 0.4791667,-0.26041 0.75,-0.65625 0.28125,-0.40625 0.3229167,-1.08333 h 1.6145834 v 13.97917 h 3.1666669 z\",\r\n        svgPath0 = \"m 22.525298,302.24672 q 0,4.17709 -1.3125,6.13542 -1.302084,1.94792 -4.052084,1.94792 -2.791666,0 -4.083333,-1.97917 -1.28125,-1.97917 -1.28125,-6.08333 0,-4.13542 1.302083,-6.10417 1.302084,-1.97917 4.0625,-1.97917 2.791667,0 4.072917,2.01042 1.291667,2 1.291667,6.05208 z m -2.739584,4.72917 q 0.364584,-0.84375 0.489584,-1.97917 0.135416,-1.14583 0.135416,-2.75 0,-1.58333 -0.135416,-2.75 -0.125,-1.16666 -0.5,-1.97916 -0.364584,-0.80209 -1,-1.20834 -0.625,-0.40625 -1.614584,-0.40625 -0.979166,0 -1.625,0.40625 -0.635416,0.40625 -1.010416,1.22917 -0.354167,0.77083 -0.489584,2.01042 -0.125,1.23958 -0.125,2.71875 0,1.625 0.114584,2.71875 0.114583,1.09375 0.489583,1.95833 0.34375,0.8125 0.96875,1.23958 0.635417,0.42709 1.677083,0.42709 0.979167,0 1.625,-0.40625 0.645834,-0.40625 1,-1.22917 z\"\r\n\r\n    var svgIcon3 = el( 'svg', {\r\n            width:24,\r\n            height:24,\r\n            viewBox: '0 0 100 100'\r\n        },\r\n            el( 'g', {\r\n                //transform: \"translate(0,-10) scale(1,2)\"\r\n            },\r\n                el( 'path', {\r\n                    d: svgPath3,\r\n                    fill: 'none',\r\n                    stroke: '#000'\r\n                } )\r\n            ),\r\n        ),\r\n        svgIcon5 = el( 'svg', {\r\n            width:24,\r\n            height:24,\r\n            viewBox: '0 0 6.6145833 6.6145833'\r\n        },\r\n            el( 'g', {\r\n                transform: \"translate(0,-290.38542)\"\r\n            },\r\n                el( 'path', {\r\n                    d: svgPath5\r\n                } )\r\n            ),\r\n        ),\r\n        svgIcon10 = el( 'svg', {\r\n            width:24,\r\n            height:24,\r\n            viewBox: '0 0 24 24'\r\n\r\n        },\r\n            el( 'g', {\r\n                transform: \"translate(0,-290.38542)\"\r\n            },\r\n                el( 'path', {\r\n                    d: svgPath1\r\n                } ),\r\n                el( 'path', {\r\n                    d: svgPath0\r\n                } )\r\n            ),\r\n        );\r\n\r\n    function defProp( name, def ){\r\n        return {\r\n            [name]:{\r\n                type: 'string',\r\n                default: def\r\n            }\r\n        }\r\n    }\r\n\r\n    function boolProp( name, def ){\r\n        return {\r\n            [name]: {\r\n                type: 'boolean',\r\n                default: def\r\n            }\r\n        }\r\n    }\r\n\r\n    function defHTMLProp( name, sel, def ){\r\n        return {\r\n            [name]: {\r\n                type: 'string',\r\n                source: 'html',\r\n                selector: sel,\r\n                default: def\r\n            }\r\n        }\r\n    }\r\n\r\n    function stripQuotes( value ){\r\n        //return encodeURIComponent( value.replace( /[`]|[']|[\"]/g, '' ))\r\n        if( value )\r\n            return value.replace( /[`]|[']|[\"]/g, '' )\r\n    }\r\n\r\n    function stripUnderscores( value ){\r\n        if( value )\r\n            return value.replace( /[_]/g, '')\r\n    }\r\n\r\n\r\n    function stripColons( value ){\r\n        if( value )\r\n            return value.replace( /[,]/g, '' )\r\n    }\r\n\r\n    function spaceToHyphen( value ){\r\n        if( value )\r\n            return value.replace( /\\s/g, '-')\r\n    }\r\n\r\n    /*\r\n        Couldn't get this done with select('core/editor').getCurrentPostId()\r\n        because this returns null when the post is evaluated (first run\r\n        of registerBlockType(/form) save()). \r\n    */\r\n    function getPostId(){\r\n        var href = document.location.href.split('?'),\r\n            urlParts = href[1] ? href[1].split('&') : [],\r\n            postId = null;\r\n\r\n        urlParts.forEach( ( part ) => {\r\n            if( part.match(/^post/) ){\r\n                var postIdCandidate = part.replace( /^[^=]*=/, '' )\r\n                if( ! isNaN( parseInt( postIdCandidate)))\r\n                    postId = postIdCandidate\r\n            }\r\n        })\r\n\r\n        // New posts\r\n        if( ! postId)\r\n            postId = select( 'core/editor' ).getCurrentPostId()\r\n\r\n        return postId\r\n    }\r\n\r\n    /*\r\n        Underscores shouldn't be used by the user but are reserved in names of\r\n        input fields in order to parse and validate them the right way\r\n    */\r\n    function makeName( props, type ){\r\n        var prefix = props.attributes.name + '_' + type + '_input'\r\n\r\n        if( props.attributes.row )\r\n            prefix = '_row' + props.attributes.row + '_' + prefix\r\n\r\n        return prefix\r\n    }\r\n\r\n    function registerFormAttributes( ){\r\n\r\n        var o = {}\r\n        \r\n        Object.assign( o, defProp( 'name', 'form1') )\r\n        Object.assign( o, defProp( 'className' ))\r\n        Object.assign( o, defProp( 'uniqueID' ) )\r\n        Object.assign( o, defProp( 'submitBtnText', __( 'Submit', textDomain ) ))\r\n        Object.assign( o, defProp( 'formCaption') )\r\n\r\n        return o\r\n    }\r\n\r\n    function registerFormElementAttributes( defType ){\r\n        var o ={}\r\n\r\n        if( defType == 'file'){\r\n            Object.assign( o, defProp( 'name', 'files' ))\r\n            Object.assign( o, boolProp( 'multiple' ))\r\n        }\r\n        else\r\n            Object.assign( o, defProp( 'name' ) )\r\n            \r\n        if( defType == 'checkbox'){\r\n            Object.assign( o, defProp( 'description' ))\r\n            Object.assign( o, boolProp( 'default' ))\r\n        }\r\n\r\n        if( [ 'text' ].indexOf( defType ) > -1)\r\n            Object.assign( o, defProp( 'placeholder' ))\r\n\r\n        if( defType == 'range')\r\n            Object.assign( o, defProp( 'value', 50 ))\r\n\r\n        Object.assign( o, defProp( 'label' ))\r\n        Object.assign( o, defProp( 'id' ));\r\n        Object.assign( o, boolProp( 'required' ))\r\n        Object.assign( o, defProp( 'type', defType ))\r\n        Object.assign( o, defProp( 'row' ))\r\n\r\n        return o\r\n    }\r\n\r\n    function registerRowAttributes(){\r\n        var o = {}\r\n\r\n        Object.assign( o, boolProp( 'dup', false ))\r\n\r\n        return o\r\n    }\r\n\r\n    function registerSelectElementAttributes(){\r\n        var o = {\r\n            options: {\r\n                type: 'array',\r\n                source: 'query',\r\n                selector: 'option',\r\n                query: {\r\n                    value: {\r\n                        type: 'string',\r\n                        source: 'attribute',\r\n                        attribute: 'value'\r\n                    } \r\n                }\r\n            }\r\n        }\r\n\r\n        Object.assign( o, defProp( 'name' ))\r\n        Object.assign( o, boolProp( 'multiple' ))\r\n        Object.assign( o, boolProp( 'required' ))\r\n        Object.assign( o, defProp( 'label' ))\r\n        Object.assign( o, defProp( 'id' ))\r\n        Object.assign( o, defProp( 'row' ))\r\n\r\n        return o\r\n    }\r\n\r\n    function registerRadioElementAttributes(){\r\n        var o = {\r\n            options: {\r\n                type: 'array',\r\n                source: 'query',\r\n                selector: 'input',\r\n                query: {\r\n                    value: {\r\n                        type: 'string',\r\n                        source: 'attribute',\r\n                        attribute: 'value'\r\n                    },\r\n                    id: {\r\n                        type: 'string',\r\n                        source: 'attribute',\r\n                        attribute: 'id'\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        Object.assign( o, defProp( 'name' ))\r\n        Object.assign( o, boolProp( 'required' ))\r\n        Object.assign( o, defProp( 'label' ))\r\n        Object.assign( o, defProp( 'id' ))\r\n        Object.assign( o, defProp( 'type', 'radio' ))\r\n        Object.assign( o, defProp( 'direction', 'vertical' ))\r\n\r\n        return o\r\n    }\r\n\r\n    function registerFormBlock( props, mode, postId ){\r\n\r\n        return el( 'div', { 'class': props.attributes.className }, \r\n        \r\n                [ el( 'span', { 'class' : props.attributes.formCaption ? 'title' : 'hide' }, props.attributes.formCaption ),\r\n\r\n                el( 'form', { \r\n                        action: urls.admin_url, \r\n                        method: 'POST', \r\n                        name: 'qm_quotation_form', \r\n                        enctype: 'multipart/form-data' \r\n                    },\r\n\r\n                    el( 'input', { type: 'hidden', name: 'action', value: 'save_quotation'} ),\r\n\r\n                    el( 'input', { type: 'hidden', name: 'nonce' }),\r\n\r\n                    el( 'input', { type: 'hidden', name: 'uniqueID', value: props.attributes.uniqueID }),\r\n\r\n                    el( 'input', { type: 'hidden', name: 'formName', value: props.attributes.name }),\r\n\r\n                    el( 'input', { type: 'hidden', name: 'wp_postID', value: postId } ),\r\n\r\n                    registerInnerBlocks( mode, allowed_blocks ),\r\n\r\n                    el( 'div', {},\r\n                        el( 'input', { type: 'submit', value: props.attributes.submitBtnText, 'class': 'button button-primary' } )\r\n                    )\r\n                )]\r\n        )\r\n    }\r\n\r\n    function registerRow( props, mode ){\r\n        return el( 'fieldset', {'class': '', name: 'row'}, \r\n            el( 'div', { \r\n                'class': 'wp-block-quotation-manager-row', \r\n                'dup': props.attributes.dup === true ? '1': '0'  }, \r\n                registerInnerBlocks( mode, allowed_blocks_row ) \r\n            )\r\n        )\r\n    }\r\n\r\n    function registerInnerBlocks( mode, allowed_blocks ){\r\n        if( mode == 'edit')\r\n            return el( 'div', null, el( InnerBlocks, { allowedBlocks: allowed_blocks }))\r\n        else \r\n            return el( 'div', null,  el( InnerBlocks.Content ))\r\n    }\r\n\r\n    function registerFormElement( tag, props ){\r\n\r\n        var name = makeName( props, props.attributes.type )\r\n\r\n        var ob = { \r\n            name: name,\r\n            required: props.attributes.required,\r\n            'aria-labelledby': props.attributes.id\r\n        }\r\n\r\n        if( props.attributes.placeholder )\r\n            Object.assign( ob, { placeholder: props.attributes.placeholder })\r\n\r\n        if( props.attributes.type == 'file'\r\n            && props.attributes.multiple)\r\n            Object.assign( ob, { multiple:true })\r\n\r\n        if( props.attributes.type == 'range'){\r\n            Object.assign( ob, { \r\n                min: 1,\r\n                max: 100,\r\n                step: 10,\r\n                value: props.attributes.value\r\n            })\r\n        }\r\n\r\n        Object.assign( ob, { type: props.attributes.type })\r\n\r\n        if( props.attributes.type == 'checkbox'){\r\n\r\n            if( props.attributes.default && props.attributes.default === true)\r\n                Object.assign( ob, { checked: true})\r\n\r\n            Object.assign( ob, { id: props.attributes.id })\r\n            return el( 'div', {}, \r\n                el( 'label', { \r\n                        id: props.attributes.id, \r\n                        'class' : 'container' \r\n                    }, \r\n                    [el( tag, ob),\r\n                    el( 'span', { 'class': 'checkmark' } ),\r\n                    el('span', {}, props.attributes.description)]\r\n                )\r\n            )\r\n        }\r\n        else\r\n            return el( tag, ob)\r\n    }\r\n\r\n    function registerFormElementWithLabel( props, fe ){\r\n        return el( 'div', {},\r\n            [\r\n                el( 'span', { id:props.attributes.id }, props.attributes.label ),\r\n                fe\r\n            ]\r\n        )\r\n    }\r\n\r\n    function registerDateElement( props ){\r\n\r\n        return el( 'input', { \r\n            name: makeName( props, 'date' ),\r\n            type: 'text', \r\n            placeholder: __( '[datepicker]', textDomain ) \r\n        })\r\n    }\r\n\r\n    function registerTextArea( props ){\r\n        return registerFormElement( 'textarea', props )\r\n    }\r\n\r\n    function registerInputElement( props ){\r\n        return el( 'div', {}, registerFormElement( 'input',  props ))\r\n    }\r\n\r\n    function registerRangeElement( props ){\r\n        return el( RadioControl, {});\r\n    }\r\n\r\n    function registerSelect( props ){\r\n\r\n        return el( 'div', {},  \r\n            el( 'select', \r\n                {   \r\n                    'aria-labelledby': props.attributes.id,\r\n                    multiple: props.attributes.multiple,\r\n                    name: makeName( props, 'select' ), \r\n                    required: props.attributes.required \r\n                },\r\n                registerOptions( props.attributes.options )\r\n            )\r\n        )\r\n    }\r\n\r\n    function registerRadios( props ){\r\n        \r\n        var choices = props.attributes.options,\r\n            els = [];\r\n\r\n        if( choices instanceof Array)\r\n            choices.forEach( ( choice ) => {\r\n                els.push( \r\n                    el( 'div', { 'class': props.attributes.direction },\r\n                        el( 'input', { id: choice.id, name: makeName( props, 'radio' ), type: 'radio', value: choice.value } ),\r\n                        el( 'label', { for: choice.id }, choice.value ) \r\n                    )\r\n                )\r\n            })\r\n\r\n        return el( 'div', {}, els )\r\n    }\r\n\r\n    function registerOptions( value ){\r\n        var o = []\r\n        if( value instanceof Array)\r\n            value.forEach( ( ob ) => {\r\n                o.push( el( 'option', { value: ob.value }, ob.value ))\r\n            })\r\n        return o\r\n    }\r\n\r\n    function registerEditControls( props, callables ){\r\n        return  el( Fragment, {}, \r\n                    el( InspectorControls, {}, \r\n                    [ \r\n                        el( PanelBody, {},\r\n                            el( 'h2', { align: 'center' }, __( 'Quotation Manager', textDomain )),\r\n                            editControlName( props ),\r\n                            ... callables instanceof Array ? callables  : []\r\n                        )\r\n                    ])\r\n                )\r\n    }\r\n\r\n    function editControlCaptionControl( props ){\r\n        return el( PanelRow, {},\r\n            el( TextControl, {\r\n                label: __( 'Caption', textDomain),\r\n                help: __( 'The caption of the form', textDomain),\r\n                value: props.attributes.formCaption,\r\n                onChange: ( value ) => {\r\n                    props.setAttributes( { formCaption: stripUnderscores( stripQuotes( value ) )} )\r\n                }\r\n            }),\r\n        )\r\n    }\r\n\r\n    function editControlFormClassName( props ){\r\n        return el( PanelRow, {},\r\n            el( SelectControl, {\r\n                label: __( 'Style', textDomain),\r\n                help: __( 'The styling of the form', textDomain),\r\n                value: props.attributes.className,\r\n                options: [\r\n                    { label: 'None, use theme style instead', value: ''},\r\n                    { label: 'Azure blue', value: 'azure'},\r\n                    { label: 'Industrial off-white', value: 'industrial'},\r\n                    { label: 'Sparkling red', value: 'sparkling'},\r\n                    { label: 'White on black', value: 'white-on-black'}\r\n                ],\r\n                onChange: ( value ) => {\r\n                    props.setAttributes( { className: stripUnderscores( stripQuotes( value ) )} )\r\n                }\r\n            }),\r\n        )\r\n    }\r\n\r\n    function editControlPlaceHolder( props ){\r\n        return el( PanelRow, {},\r\n            el( TextControl, {\r\n                label: __( 'Placeholder', textDomain),\r\n                help: __( 'Text to show when still empty', textDomain),\r\n                value: props.attributes.placeholder,\r\n                onChange: ( value ) => {\r\n                    props.setAttributes( { placeholder: stripUnderscores( stripQuotes( value ) )} )\r\n                }\r\n            }),\r\n        )\r\n    }\r\n\r\n    function editControlDefault( props ){\r\n        return el( PanelRow, {},\r\n            el( CheckboxControl, {\r\n                label: __( 'Checked', textDomain),\r\n                help: __( 'Should be checked by default?', textDomain),\r\n                checked: props.attributes.default,\r\n                onChange: ( value ) => {\r\n                    props.setAttributes( { default: value} )\r\n                }\r\n            }),\r\n        )\r\n    }\r\n\r\n    function editControlName( props ){\r\n        return el( PanelRow, {},\r\n            el( TextControl, {\r\n                label: __( 'Name', textDomain),\r\n                help: __( 'The name of the field', textDomain),\r\n                value: props.attributes.name,\r\n                onChange: ( value ) => {\r\n\r\n                    props.setAttributes( { name: spaceToHyphen( stripUnderscores( stripQuotes( value )))} )\r\n                }\r\n            }),\r\n        )\r\n    }\r\n\r\n    function editControlSubmitBtnText( props ){\r\n        return el( PanelRow, {},\r\n            el( TextControl, {\r\n                label: __( 'Submit button text', textDomain),\r\n                help: __( 'The text of the submit button', textDomain),\r\n                value: props.attributes.submitBtnText,\r\n                onChange: ( value ) => {\r\n                    props.setAttributes( { submitBtnText: value } )\r\n                }\r\n            }),\r\n        )\r\n    }\r\n\r\n    function editControlRequired( props ){\r\n        return el( PanelRow, {},\r\n            el( CheckboxControl, {\r\n                label: __( 'Required', textDomain ),\r\n                help: __( 'Make this field required', textDomain ),\r\n                checked: props.attributes.required,\r\n                onChange: ( value ) => {\r\n                    props.setAttributes( { required: value } )\r\n                } \r\n            }))\r\n    }\r\n\r\n    function editControlValue( props ){\r\n        return el( PanelRow, {},\r\n            el( TextControl, {\r\n                label: __( 'Initial value', textDomain ),\r\n                help: __( 'Initial value between 0 - 100', textDomain ),\r\n                value: props.attributes.value,\r\n                onChange: ( value ) => {\r\n                    value = parseInt( value )\r\n                    if( value >= 0 && value <= 100 )\r\n                        props.setAttributes( { value: value } )\r\n                } \r\n            }))\r\n    }\r\n\r\n    function editControlLabel( props, noId ){\r\n        return el( PanelRow, {},\r\n            el( TextareaControl, {\r\n                label: __( 'Label', textDomain ),\r\n                help: __( 'Label to show with this field', textDomain ),\r\n                value: props.attributes.label,\r\n                onChange: ( value ) => {\r\n                    if( noId && noId == true )\r\n                        props.setAttributes( { label: value })\r\n                    else\r\n                        props.setAttributes( { label: value, id: 'id' + (new Date()).getTime() } )\r\n                } \r\n            }))\r\n    }\r\n\r\n    function editControlDescription( props ){\r\n        return el( PanelRow, {},\r\n            el( TextareaControl, {\r\n                label: __( 'Description', textDomain ),\r\n                help: __( 'What it means to select this checkbox', textDomain ),\r\n                value: props.attributes.description,\r\n                onChange: ( value ) => {\r\n                    props.setAttributes( { description: value , id: 'cb' + (new Date()).getTime() } )\r\n                } \r\n            }))\r\n    }\r\n\r\n    function editControlMultiple( props ){\r\n        return el( PanelRow, {},\r\n            el( CheckboxControl, {\r\n                label: __( 'Multiple', textDomain ),\r\n                help: __( 'Make possible to upload multiple files', textDomain ),\r\n                checked: props.attributes.multiple,\r\n                onChange: ( value ) => {\r\n                    props.setAttributes( { multiple: value } )\r\n                } \r\n            }))\r\n    }\r\n\r\n    function editControlDup( props ){\r\n        return el( PanelRow, {},\r\n            el( CheckboxControl, {\r\n                label: __( 'Dup this row', textDomain ),\r\n                help: __( 'Allow visitors to add more rows' ),\r\n                checked: props.attributes.dup,\r\n                onChange: ( value ) => {\r\n                    props.setAttributes( { dup: value} )\r\n                }\r\n            }))\r\n    }\r\n\r\n    function registerTextAreaBlockEditControls( props ){\r\n        return  el( Fragment, {}, \r\n            el( InspectorControls, {}, \r\n            [ \r\n                el( PanelBody, {},\r\n                    editControlName( props ),\r\n                    editControlRequired( props ),\r\n                )\r\n            ])\r\n        )\r\n    }\r\n\r\n    function registerRowEditControls( props ){\r\n        return el( Fragment, {},\r\n            el( InspectorControls, {}, [\r\n                el( PanelBody, {},\r\n                    editControlDup( props ))\r\n            ]))\r\n    }\r\n\r\n    function registerSelectBlockEditControls( props ){\r\n        return  el( Fragment, {}, \r\n            el( InspectorControls, {}, \r\n            [ \r\n                el( PanelBody, {},\r\n                    editControlName( props ),\r\n                    editControlLabel( props ),\r\n                    editControlRequired( props ),\r\n                    editControlMultiple( props ),\r\n                    el( PanelRow, {}, \r\n                        el( TextareaControl, {\r\n                            label: __( 'Options', textDomain ),\r\n                            help: __( 'The options to the select. Leave first line empty if this field is required', textDomain ),\r\n                            value: props.attributes.options? \r\n                                props.attributes.options.map( ( o ) => { return stripColons( o.value ) }).toString().replace(/,/g, \"\\n\") \r\n                                : \r\n                                '',\r\n                            onChange: ( value ) => {\r\n\r\n                                value = stripQuotes( value )\r\n\r\n                                var o = [],\r\n                                    vals = value.split( '\\n' );\r\n\r\n                                vals.forEach( ( val ) => {\r\n                                    o.push( { value: val } )\r\n                                })\r\n\r\n                                props.setAttributes( { options: o } )\r\n                            }\r\n                        })\r\n                    )\r\n                )\r\n            ])\r\n        )\r\n    }\r\n\r\n    function editControlRadio( props ){\r\n        return el( PanelRow, {}, \r\n            el( TextareaControl, {\r\n                label: __( 'Choices', textDomain ),\r\n                help: __( 'The choices to select from.', textDomain ),\r\n                value: props.attributes.options? \r\n                    props.attributes.options.map( ( o ) => { return stripColons( o.value ) }).toString().replace(/,/g, \"\\n\") \r\n                    : \r\n                    '',\r\n                onChange: ( value ) => {\r\n\r\n                    value = stripQuotes( value )\r\n\r\n                    var o = [],\r\n                        vals = value.split( '\\n' );\r\n\r\n                    vals.forEach( ( val, index ) => {\r\n                        if( ! props.attributes.options \r\n                            || ! props.attributes.options[ index ])\r\n                            id =   'radio' + ( new Date() ).getTime()\r\n                        else\r\n                            id = props.attributes.options[ index ].id\r\n                        o.push( { value: val, id: id } )\r\n                    })\r\n\r\n                    props.setAttributes( { options: o } )\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    function editControlDirection( props ){\r\n        return el( PanelRow, {},\r\n                el( RadioControl, {\r\n                    label: __( 'Direction', textDomain ),\r\n                    help: __( 'Horizontal or vertical alligned radio buttons', textDomain ),\r\n                    selected: props.attributes.direction,\r\n                    options: [\r\n                        { label: __( 'Vertical', textDomain ), value: 'vertical' },\r\n                        { label: __( 'Horizontal', textDomain ), value: 'horizontal' }\r\n                    ],\r\n                    onChange: ( value ) => {\r\n                        props.setAttributes( { direction: value })\r\n                    }\r\n                },\r\n            )\r\n        )\r\n    }\r\n\r\n    function registerBeforeEdit( props ){\r\n        \r\n        if( ! props.attributes.uniqueID )\r\n            props.attributes.uniqueID = 'QM_' + ( new Date() ).getTime();\r\n\r\n        return props\r\n    }\r\n\r\n    function parentIsRow( clientId ){\r\n\r\n        var parents = select( 'core/block-editor' ).getBlockParents( clientId ),\r\n            parentIsRow = -1\r\n\r\n        parents.forEach( ( parent ) => {\r\n            if( parents.length == 2 && rowClientIds.indexOf( parent ) > -1 )\r\n                parentIsRow = rowChars[ rowClientIds.indexOf( parent ) ]\r\n        })\r\n\r\n        return parentIsRow\r\n    }\r\n\r\n    //registerBlockType( category + '/billing-address', {})\r\n\r\n    registerBlockType( category + '/form', {\r\n        title: __( 'Form', textDomain ),\r\n        category: textDomain,\r\n        icon: svgIcon3,\r\n        description: __( 'Quotation form', textDomain),\r\n        keywords: [ __('quotation', textDomain)],\r\n    \r\n        attributes: registerFormAttributes( ),\r\n     \r\n        edit: function( props ) {\r\n\r\n            props = registerBeforeEdit( props ) \r\n        \r\n            return [\r\n\r\n                registerFormBlock( props, 'edit', getPostId() ),\r\n                registerEditControls( props, [ \r\n                    editControlFormClassName( props ),\r\n                    editControlCaptionControl( props ), \r\n                    editControlSubmitBtnText( props )\r\n                ] )\r\n            ]\r\n        },\r\n    \r\n        save: function( props ){\r\n\r\n            return el( 'div', {},\r\n                registerFormBlock( props, 'save', getPostId() )\r\n            )\r\n        }\r\n    });\r\n\r\n    registerBlockType( category + '/row', {\r\n        title: __( 'Row of input fields', textDomain),\r\n        category: textDomain,\r\n        icon: svgIcon3,\r\n        parent: [ category + '/form' ],\r\n        description: __( 'Row of input fields', textDomain ),\r\n        keywords: [ __( 'row', textDomain )],\r\n\r\n        attributes: registerRowAttributes(),\r\n\r\n        edit:  function( props ){\r\n\r\n            if( rowClientIds.length >= rowChars.length )\r\n                throw( new Error( 'Too many rows' ) )\r\n                \r\n            if( rowClientIds.indexOf( props.clientId ) == -1)\r\n                rowClientIds.push( props.clientId )\r\n\r\n            return [\r\n                registerRow( props, 'edit' ),\r\n                registerRowEditControls( props )\r\n            ]\r\n        },\r\n        save: function( props ){\r\n            return registerRow( props, 'save' )\r\n        }\r\n    } )\r\n\r\n    registerBlockType( category + '/textarea', {\r\n        title: __( 'Text Area', textDomain ),\r\n        category: textDomain,\r\n        icon: svgIcon3,\r\n        parent: [ category + '/form' ],\r\n        description: __( 'Multiple line text input form element', textDomain),\r\n        keywords: [ __('multi line', textDomain)],\r\n    \r\n        attributes: registerFormElementAttributes( ),\r\n     \r\n        edit: function( props ) {\r\n        \r\n            return [\r\n\r\n                registerFormElementWithLabel( props, registerTextArea( props )),\r\n                registerTextAreaBlockEditControls( props ),\r\n                registerEditControls( props, [\r\n                    editControlRequired( props ),\r\n                    editControlLabel( props )\r\n                ])\r\n            ]\r\n        },\r\n    \r\n        save: function( props ){\r\n    \r\n            return registerFormElementWithLabel( props, registerTextArea( props ))\r\n        }\r\n    })\r\n\r\n    registerBlockType( category + '/textinput', {\r\n        title: __( 'Text input', textDomain ),\r\n        category: textDomain,\r\n        icon: svgIcon3,\r\n        parent: [ category + '/form', category + '/row' ],\r\n        description: __( 'Input text element', textDomain ),\r\n        keywords: [ __( 'Input text element', textDomain ) ],\r\n\r\n        attributes: registerFormElementAttributes( 'text' ),\r\n\r\n        edit: function( props ){\r\n\r\n            var r = parentIsRow( props.clientId )\r\n            if( r != -1)\r\n                props.attributes.row = r\r\n\r\n            return [\r\n                registerFormElementWithLabel( props, registerInputElement( props )),\r\n                registerEditControls( props, [\r\n                    editControlRequired( props ),\r\n                    editControlLabel( props ),\r\n                    editControlPlaceHolder( props )\r\n                ])\r\n            ]\r\n        },\r\n\r\n        save: function( props ){\r\n            return registerFormElementWithLabel( props, registerInputElement( props ))\r\n        }\r\n    } )\r\n\r\n    /**\r\n     * Shows an dummy datepicker in Admin.\r\n     * At the frontend the html5 input type=date is shown (cannot be shown in admin)\r\n     */\r\n    registerBlockType( category + '/dateinput', {\r\n        title: __( 'Date input', textDomain ),\r\n        category: textDomain,\r\n        icon: svgIcon3,\r\n        parent: [ category + '/form', category + '/row' ],\r\n        description: __( 'Input date element', textDomain ),\r\n        keywords: [ __( 'Input date element', textDomain ) ],\r\n\r\n        attributes: registerFormElementAttributes( 'date' ),\r\n\r\n        edit: function( props ){\r\n\r\n            var r = parentIsRow( props.clientId )\r\n            if( r != -1)\r\n                props.attributes.row = r\r\n\r\n            return [\r\n                registerFormElementWithLabel( props, registerDateElement( props )),\r\n                registerEditControls( props, [\r\n                    editControlRequired( props ),\r\n                    editControlLabel( props )\r\n                ])\r\n            ]\r\n        },\r\n\r\n        save: function( props ){\r\n            return registerFormElementWithLabel( props, registerInputElement( props ))\r\n        }\r\n    } )\r\n\r\n    registerBlockType( category + '/select', {\r\n        title: __( 'Select', textDomain ),\r\n        category: textDomain,\r\n        icon: svgIcon3,\r\n        parent: [ category + '/form', category + '/row' ],\r\n        description: __( 'Select input form element', textDomain ),\r\n        keywords: [ __( 'select', textDomain ) ],\r\n\r\n        attributes: registerSelectElementAttributes( ),\r\n\r\n        edit: function( props ){\r\n\r\n            var r = parentIsRow( props.clientId )\r\n            if( r != -1)\r\n                props.attributes.row = r\r\n            \r\n            return [\r\n                registerFormElementWithLabel( props, registerSelect( props )),\r\n                registerSelectBlockEditControls( props )\r\n            ]\r\n        },\r\n\r\n        save: function( props ){\r\n\r\n            return registerFormElementWithLabel( props, registerSelect( props ))\r\n        }\r\n    } )\r\n\r\n    registerBlockType( category + '/checkbox', {\r\n        title: __( 'Checkbox', textDomain ),\r\n        category: textDomain,\r\n        icon: svgIcon3,\r\n        parent: [ category + '/form', category + '/row' ],\r\n        description: __( 'Checkbox form element', textDomain ),\r\n        keywords: [ __( 'Checkbox' ) ],\r\n\r\n        attributes: registerFormElementAttributes( 'checkbox' ),\r\n\r\n        edit: function( props ){\r\n\r\n            var r = parentIsRow( props.clientId )\r\n            if( r != -1)\r\n                props.attributes.row = r\r\n\r\n            return [\r\n                registerFormElementWithLabel( props, registerInputElement( props )),\r\n                registerEditControls( props, [ \r\n                    editControlLabel( props ),\r\n                    editControlDescription( props ),\r\n                    editControlDefault( props ),\r\n                    editControlRequired( props )\r\n                ] )            ]\r\n        },\r\n\r\n        save: function( props ){\r\n            return registerFormElementWithLabel( props, registerInputElement( props ))\r\n        }\r\n    })\r\n\r\n    registerBlockType( category + '/radiobutton', {\r\n        title: __( 'Radio button', textDomain ),\r\n        category: textDomain,\r\n        icon: svgIcon3,\r\n        parent: [ category + '/form' ],\r\n        description: __( 'Radio button form element', textDomain ),\r\n        keywords: [ __( 'Radio button', 'choice', 'choose' ) ],\r\n\r\n        attributes: registerRadioElementAttributes( ),\r\n\r\n        edit: function( props ){\r\n            return [\r\n                registerFormElementWithLabel( props, registerRadios( props )),\r\n                registerEditControls( props, [\r\n                    editControlLabel( props, true ),\r\n                    editControlRadio( props ),\r\n                    editControlRequired( props ),\r\n                    editControlDirection( props )\r\n                ] )\r\n            ]\r\n        },\r\n\r\n        save: function( props ){\r\n            return registerFormElementWithLabel( props, registerRadios( props ))\r\n        }\r\n    } )\r\n\r\n    registerBlockType( category + '/fileinput', {\r\n        title: __( 'File upload', textDomain ),\r\n        category: textDomain,\r\n        icon: svgIcon3,\r\n        parent: [ category + '/form', category + '/row' ],\r\n        description: __( 'Upload file form element', textDomain ),\r\n        keywords: [ __( 'File' ), __( 'upload' ) ],\r\n\r\n        attributes: registerFormElementAttributes( 'file' ),\r\n\r\n        edit: function( props ){\r\n            \r\n            var r = parentIsRow( props.clientId )\r\n            if( r != -1)\r\n                props.attributes.row = r\r\n\r\n            return [\r\n                registerFormElementWithLabel( props, registerInputElement( props )),\r\n                registerEditControls( props , [\r\n                    editControlLabel( props ),\r\n                    editControlRequired( props ),\r\n                    editControlMultiple( props )\r\n                ])\r\n            ]\r\n        },\r\n\r\n        save: function( props ){\r\n            return registerFormElementWithLabel( props, registerInputElement( props ))\r\n        }\r\n    } )\r\n\r\n    registerBlockType( category + '/emailinput', {\r\n        title: __( 'Input email address', textDomain ),\r\n        category: textDomain,\r\n        icon: svgIcon3,\r\n        parent: [ category + '/form', category + '/row' ],\r\n        description: __( 'Emailaddress form element', textDomain ),\r\n        keywords: [ __( 'emailaddress' ), __( 'email' ) ],\r\n\r\n        attributes: registerFormElementAttributes( 'email' ),\r\n\r\n        edit: function( props ){\r\n\r\n            var r = parentIsRow( props.clientId )\r\n            if( r != -1)\r\n                props.attributes.row = r\r\n\r\n            return [\r\n                registerFormElementWithLabel( props, registerInputElement( props )),\r\n                registerEditControls( props , [\r\n                    editControlLabel( props ),\r\n                    editControlRequired( props )\r\n                ])\r\n            ]\r\n        },\r\n\r\n        save: function( props ){\r\n            return registerFormElementWithLabel( props, registerInputElement( props ))\r\n        }\r\n    } )\r\n\r\n    registerBlockType( category + '/telephonenumber', {\r\n        title: __( 'Input telephone number', textDomain ),\r\n        category: textDomain,\r\n        icon: svgIcon3,\r\n        parent: [ category + '/form', category + '/row' ],\r\n        description: __( 'Telephone number form element', textDomain ),\r\n        keywords: [ __( 'telephone number' ), __( 'number' ) ],\r\n\r\n        attributes: registerFormElementAttributes( 'tel' ),\r\n\r\n        edit: function( props ){\r\n\r\n            var r = parentIsRow( props.clientId )\r\n            if( r != -1)\r\n                props.attributes.row = r\r\n\r\n            return [\r\n                registerFormElementWithLabel( props, registerInputElement( props )),\r\n                registerEditControls( props , [\r\n                    editControlLabel( props ),\r\n                    editControlRequired( props )\r\n                ])\r\n            ]\r\n        },\r\n\r\n        save: function( props ){\r\n            return registerFormElementWithLabel( props, registerInputElement( props ))\r\n        }\r\n    } )\r\n\r\n    registerBlockType( category + '/numberinput', {\r\n        title: __( 'Input number', textDomain ),\r\n        category: textDomain,\r\n        icon: svgIcon3,\r\n        parent: [ category + '/form', category + '/row' ],\r\n        description: __( 'Number form element', textDomain ),\r\n        keywords: [ __( 'number' ), __( 'generic number' ) ],\r\n\r\n        attributes: registerFormElementAttributes( 'number' ),\r\n\r\n        edit: function( props ){\r\n\r\n            var r = parentIsRow( props.clientId )\r\n            if( r != -1)\r\n                props.attributes.row = r\r\n\r\n            return [\r\n                registerFormElementWithLabel( props, registerInputElement( props )),\r\n                registerEditControls( props , [\r\n                    editControlLabel( props ),\r\n                    editControlRequired( props )\r\n                ])\r\n            ]\r\n        },\r\n\r\n        save: function( props ){\r\n            return registerFormElementWithLabel( props, registerInputElement( props ))\r\n        }\r\n    } )\r\n\r\n    registerBlockType( category + '/range', {\r\n        title: __( 'Range input', textDomain ),\r\n        category: textDomain,\r\n        icon: svgIcon3,\r\n        parent: [ category + '/form', category + '/row' ],\r\n        description: __( 'Range form element', textDomain ),\r\n        keywords: [ __( 'range' ) ],\r\n\r\n        attributes: registerFormElementAttributes( 'range' ),\r\n\r\n        edit: function( props ){\r\n\r\n            var r = parentIsRow( props.clientId )\r\n            if( r != -1)\r\n                props.attributes.row = r\r\n\r\n            return [\r\n                registerFormElementWithLabel( props, registerInputElement( props )),\r\n                registerEditControls( props , [\r\n                    editControlLabel( props ),\r\n                    editControlRequired( props ),\r\n                    editControlValue( props )\r\n                ])\r\n            ]\r\n        },\r\n\r\n        save: function( props ){\r\n            return registerFormElementWithLabel( props, registerInputElement( props ))\r\n        }\r\n    } )\r\n\r\n}())\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ })

/******/ });